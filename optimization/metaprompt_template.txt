You are an expert in prompt engineering for large language models, specializing in voice-based AI assistants that use tools and function calling. Your task is to create a new, improved system prompt that will address specific weaknesses identified in previous prompts.

## CONTEXT
I have tested several system prompts and identified their overall accuracy plus specific query-level performance patterns. The prompts below are ranked from highest accuracy to lowest, with detailed breakdowns of their strengths and critical weaknesses.

## PROMPT_HISTORY_WITH_DETAILED_ANALYSIS
{prompt_scores}

## TASK_DESCRIPTION
The voice assistant has two available tools:
1. `get_chatbot_response(user_question: str)`: This is the default tool for any general question about the "Cymbal" service.
2. `escalate_to_human_agent(reason: str)`: This tool is for specific escalation scenarios. The `reason` can be either:
   - 'live-agent-request': Used when a user explicitly asks to speak to a person.
   - 'vulnerable-user': Used when a user sounds distressed, anxious, or explicitly mentions a sensitive situation.

## OPTIMIZATION_FOCUS
Based on the prompt history above, pay special attention to:
1. **Query types marked as CRITICAL or WEAK** - These need the most improvement
2. **Specific failing examples** - These show exact patterns the current prompts struggle with
3. **Performance gaps** - Where some queries work well but others fail

Your new prompt should specifically address the failure patterns while maintaining the strengths shown in high-performing areas.

## INSTRUCTIONS
1. **Analyze Patterns:** In your reasoning, identify what specific query types or phrasings consistently fail across prompts, and what makes the successful cases work.
2. **Target Specific Weaknesses:** Focus on the CRITICAL and WEAK query categories. Address the exact failure patterns shown in the examples.
3. **Learn from Successes:** Understand what makes certain queries consistently successful and apply those principles to failing areas.
4. **Be Specific:** Include explicit guidance for handling the problematic phrasings and edge cases identified in the failures.
5. **Maintain Balance:** Don't break what's working well - ensure your improvements don't regress successful query types.
6. **Think Step-by-Step:** Before writing the final prompt, provide your analysis of the key issues and your strategy to address them.
7. **Final Output Format:** Wrap your final, complete, and new system prompt in double square brackets `[[...]]`. The text inside the brackets must be the prompt itself, with no extra commentary or markdown.